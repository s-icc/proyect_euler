# The sequence of triangle numbers is generated by adding the natural numbers. 
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten 
# terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#      1: 1
#      3: 1,3
#      6: 1,2,3,6
#     10: 1,2,5,10
#     15: 1,3,5,15
#     21: 1,3,7,21
#     28: 1,2,4,7,14,28

# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

from math import sqrt

def returnsTriangleNums():
	t_nums = 1
	i = 2
	while True:
		t_nums = t_nums + i
		i += 1
		yield t_nums


num = returnsTriangleNums()
t_num = next(num)
divisores = 2

while True:
	for i in range(2, int(sqrt(t_num)) + 1):
		if t_num % i == 0:
			if i*i == t_num:
				divisores = divisores + 1
			else:
				divisores = divisores + 2

	if divisores > 500:
		break

	t_num = next(num)
	divisores = 2

print('el n√∫mero de divisores de {} es: {}'.format(t_num, divisores))
